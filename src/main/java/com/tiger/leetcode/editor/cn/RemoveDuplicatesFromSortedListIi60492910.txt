
	/**
	 * Definition for singly-linked list.
	 * public class ListNode {
	 * int val;
	 * ListNode next;
	 * ListNode(int x) { val = x; }
	 * }
	 */
	class Solution {
		public ListNode deleteDuplicates(ListNode head) {
			if (head == null) return null;

			ListNode dummy = new ListNode(head.val - 1);
			dummy.next = head;

			ListNode cur = head, valid = dummy, pre = valid;

			while (cur != null) {
				while (pre.val == cur.val || (cur.next != null && cur.val == cur.next.val)) {
					pre = cur;
					cur = cur.next;
				}
				valid.next = cur;
				valid = cur;
				cur = cur.next;
			}
			return dummy.next;
		}

		//bad way!
		public ListNode deleteDuplicatesV1(ListNode head) {
			ListNode dummy = new ListNode(0);
			dummy.next = head;

			Set<Integer> set = new HashSet<>();
			Set<Integer> dupSet = new HashSet<>();
			ListNode pre = dummy, cur = head;

			while (head != null) {
				if (set.contains(head.val)) {
					dupSet.add(head.val);
				} else {
					set.add(head.val);
				}
				head = head.next;
			}

			while (cur != null) {
				if (dupSet.contains(cur.val)) {
					pre.next = cur.next;
				} else {
					pre = cur;
				}
				cur = cur.next;
			}
			return dummy.next;
		}
	}

//runtime_error:Line 20: java.lang.NullPointerException
//last_testcase:[1,1]
