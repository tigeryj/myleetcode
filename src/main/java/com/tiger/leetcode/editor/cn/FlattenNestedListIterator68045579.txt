
//	public interface NestedInteger {
	// @return true if this NestedInteger holds a single integer, rather than a nested list.
//		public boolean isInteger();

	// @return the single integer that this NestedInteger holds, if it holds a single integer
	// Return null if this NestedInteger holds a nested list
	// @return the nested list that this NestedInteger holds, if it holds a nested list
	// Return null if this NestedInteger holds a single integer
//		public List<NestedInteger> getList();

//		public Integer getInteger();

//	}

	public class NestedIterator implements Iterator<Integer> {

		private Stack<NestedInteger> stack = new Stack<>();

		public NestedIterator(List<NestedInteger> nestedList) {
			if (nestedList == null || nestedList.isEmpty()) return;
			for (int i = nestedList.size() - 1; i >= 0; i--) {
				stack.push(nestedList.get(i));
			}
		}

		@Override
		public Integer next() {
			NestedInteger pop = stack.pop();
			if (pop.isInteger()) {
				return pop.getInteger();
			} else {
				List<NestedInteger> list = pop.getList();
				for (int i = list.size() - 1; i >= 0; i--) {
					stack.push(list.get(i));
				}
				return next();
			}

		}

		@Override
		public boolean hasNext() {
			return !stack.isEmpty();
		}
	}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */

//runtime_error:
//last_testcase:[[]]
